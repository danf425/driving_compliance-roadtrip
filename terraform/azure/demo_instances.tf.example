resource "azurerm_public_ip" "az-centos7-prod" {
  name                = "${var.tag_contact}-centos07-prod-pip"
  resource_group_name = "${azurerm_resource_group.rg.name}"
  location            = "${azurerm_resource_group.rg.location}"
  allocation_method   = "Dynamic"
}

resource "azurerm_network_interface" "az-centos7-prod-nic" {
  name                      = "${var.tag_contact}-${var.tag_application}-centos7-prod-nic"
  location                  = "${azurerm_resource_group.rg.location}"
  resource_group_name       = "${azurerm_resource_group.rg.name}"
  network_security_group_id = "${azurerm_network_security_group.chef_automate.id}"

  ip_configuration {
    name                          = "${local.ip_conf_name}"
    subnet_id                     = "${azurerm_subnet.backend.id}"
    private_ip_address_allocation = "dynamic"
    public_ip_address_id          = "${azurerm_public_ip.az-centos7-prod.id}"
  }

  tags {
    X-Dept        = "${var.tag_dept}"
    X-Customer    = "${var.tag_customer}"
    X-Project     = "${var.tag_project}"
    X-Application = "${var.tag_application}"
    X-Contact     = "${var.tag_contact}"
    X-TTL         = "${var.tag_ttl}"
  }
}

resource "azurerm_virtual_machine" "az-centos7-prod" {
  name                  = "${var.tag_contact}-az-centos7-prod-${random_id.randomId.hex}"
  location              = "${azurerm_resource_group.rg.location}"
  resource_group_name   = "${azurerm_resource_group.rg.name}"
  network_interface_ids = ["${azurerm_network_interface.az-centos7-prod-nic.id}"]
  vm_size               = "${var.automate_server_instance_type}"
  delete_os_disk_on_termination = true
  #depends_on            = ["azurerm_virtual_machine.chef_automate"]

  connection {
    type        = "ssh"
    user        = "${var.azure_image_user}"
    private_key = "${file("${var.azure_private_key_path}")}"
  }

  storage_image_reference {
    publisher = "OpenLogic"
    offer     = "CentOS"
    sku       = "7.4"
    version   = "latest"
  }

  storage_os_disk {
    name          = "${var.tag_contact}-az-centos7-prod-${random_id.randomId.hex}-osdisk"
    vhd_uri       = "${azurerm_storage_account.stor.primary_blob_endpoint}${azurerm_storage_container.storcont.name}/${var.tag_application}-az-centos7-prod-osdisk.vhd"
    caching       = "ReadWrite"
    create_option = "FromImage"
    disk_size_gb  = "100"
  }

  os_profile {
    computer_name  = "${var.tag_contact}-az-centos7-prod-${random_id.randomId.hex}"
    admin_username = "${var.azure_image_user}"
    admin_password = "${var.azure_image_password}"
  }

  os_profile_linux_config {
    disable_password_authentication = true

    ssh_keys {
      path     = "/home/${var.azure_image_user}/.ssh/authorized_keys"
      key_data = "${file("${var.azure_public_key_path}")}"
    }
  }

  boot_diagnostics {
    enabled     = "true"
    storage_uri = "${azurerm_storage_account.stor.primary_blob_endpoint}"
  }

  provisioner "file" {
    content     = "${data.template_file.install_hab.rendered}"
    destination = "/tmp/install_hab.sh"
  }

  provisioner "file" {
    content     = "${data.template_file.sup_service.rendered}"
    destination = "/home/${var.azure_image_user}/hab-sup.service"
  }

  provisioner "file" {
    source     = "files/linux_baseline.toml"
    destination = "/home/${var.azure_image_user}/linux_baseline.toml"
  }

  provisioner "file" {
    source     = "files/chef-base.toml"
    destination = "/home/${var.azure_image_user}/chef-base.toml"
  }

  provisioner "remote-exec" {
    inline = [
      "sudo rm -rf /etc/machine-id",
      "sudo systemd-machine-id-setup",
      "sudo hostname aws-centos7-prod",
      "sudo groupadd hab",
      "sudo adduser hab -g hab",
      "chmod +x /tmp/install_hab.sh",
      "sudo /tmp/install_hab.sh",
      "sudo mv $HOME/hab-sup.service /etc/systemd/system/hab-sup.service",
      "sudo systemctl daemon-reload",
      "sudo systemctl start hab-sup",
      "sudo systemctl enable hab-sup",
      "sleep 60",
      "sudo hab svc load ${var.origin}/linux_baseline --channel stable --strategy at-once",
      "sudo hab config apply linux_baseline.default $(date +%s) $HOME/linux_baseline.toml",
      "sudo hab svc load ${var.origin}/chef-base --channel stable --strategy at-once",
      "sudo hab config apply chef-base.default $(date +%s) $HOME/chef-base.toml",
    ]
  }

  tags {
    X-Dept        = "${var.tag_dept}"
    X-Customer    = "${var.tag_customer}"
    X-Project     = "${var.tag_project}"
    X-Application = "${var.tag_application}"
    X-Contact     = "${var.tag_contact}"
    X-TTL         = "${var.tag_ttl}"
  }
}

////////////////////////////////
// Templates

data "template_file" "sup_service" {
  template = "${file("${path.module}/templates/hab-sup.service")}"

  vars {
    flags = "--auto-update --listen-gossip 0.0.0.0:9638 --listen-http 0.0.0.0:9631"
  }
}

data "template_file" "install_hab" {
  template = "${file("${path.module}/templates/install-hab.sh")}"
}

output "az_centos7_prod_ip" {
  value = "${azurerm_public_ip.az-centos7-prod.ip_address}"
}
